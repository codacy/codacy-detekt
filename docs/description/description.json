[ {
  "patternId" : "GlobalCoroutineUsage",
  "title" : "The usage of the `GlobalScope` instance is highly discouraged.",
  "timeToFix" : 5,
  "description" : "The usage of the `GlobalScope` instance is highly discouraged."
}, {
  "patternId" : "InjectDispatcher",
  "title" : "Don't hardcode dispatchers when creating new coroutines or calling `withContext`. Use dependency injection for dispatchers to make testing easier.",
  "timeToFix" : 5,
  "description" : "Don't hardcode dispatchers when creating new coroutines or calling `withContext`. Use dependency injection for dispatchers to make testing easier."
}, {
  "patternId" : "RedundantSuspendModifier",
  "title" : "The `suspend` modifier is only needed for functions that contain suspending calls.",
  "timeToFix" : 5,
  "description" : "The `suspend` modifier is only needed for functions that contain suspending calls."
}, {
  "patternId" : "SleepInsteadOfDelay",
  "title" : "Usage of `Thread.sleep()` in coroutines can potentially halt multiple coroutines at once.",
  "timeToFix" : 5,
  "description" : "Usage of `Thread.sleep()` in coroutines can potentially halt multiple coroutines at once."
}, {
  "patternId" : "SuspendFunWithFlowReturnType",
  "title" : "The `suspend` modifier should not be used for functions that return a Coroutines Flow type. Flows are cold streams and invoking a function that returns one should not produce any side effects.",
  "timeToFix" : 5,
  "description" : "The `suspend` modifier should not be used for functions that return a Coroutines Flow type. Flows are cold streams and invoking a function that returns one should not produce any side effects."
}, {
  "patternId" : "SuspendFunWithCoroutineScopeReceiver",
  "title" : "The `suspend` modifier should not be used for functions that use a CoroutinesScope as receiver. You should use suspend functions without the receiver or use plain functions and use coroutineScope { } instead.",
  "timeToFix" : 5,
  "description" : "The `suspend` modifier should not be used for functions that use a CoroutinesScope as receiver. You should use suspend functions without the receiver or use plain functions and use coroutineScope { } instead."
}, {
  "patternId" : "EmptyCatchBlock",
  "title" : "Empty catch block detected. Empty catch blocks indicate that an exception is ignored and not handled.",
  "timeToFix" : 5,
  "description" : "Empty catch block detected. Empty catch blocks indicate that an exception is ignored and not handled."
}, {
  "patternId" : "EmptyClassBlock",
  "title" : "Empty block of code detected. As they serve no purpose they should be removed.",
  "timeToFix" : 5,
  "description" : "Empty block of code detected. As they serve no purpose they should be removed."
}, {
  "patternId" : "EmptyDefaultConstructor",
  "title" : "Empty block of code detected. As they serve no purpose they should be removed.",
  "timeToFix" : 5,
  "description" : "Empty block of code detected. As they serve no purpose they should be removed."
}, {
  "patternId" : "EmptyDoWhileBlock",
  "title" : "Empty block of code detected. As they serve no purpose they should be removed.",
  "timeToFix" : 5,
  "description" : "Empty block of code detected. As they serve no purpose they should be removed."
}, {
  "patternId" : "EmptyElseBlock",
  "title" : "Empty block of code detected. As they serve no purpose they should be removed.",
  "timeToFix" : 5,
  "description" : "Empty block of code detected. As they serve no purpose they should be removed."
}, {
  "patternId" : "EmptyFinallyBlock",
  "title" : "Empty block of code detected. As they serve no purpose they should be removed.",
  "timeToFix" : 5,
  "description" : "Empty block of code detected. As they serve no purpose they should be removed."
}, {
  "patternId" : "EmptyForBlock",
  "title" : "Empty block of code detected. As they serve no purpose they should be removed.",
  "timeToFix" : 5,
  "description" : "Empty block of code detected. As they serve no purpose they should be removed."
}, {
  "patternId" : "EmptyFunctionBlock",
  "title" : "Empty block of code detected. As they serve no purpose they should be removed.",
  "timeToFix" : 5,
  "description" : "Empty block of code detected. As they serve no purpose they should be removed."
}, {
  "patternId" : "EmptyIfBlock",
  "title" : "Empty block of code detected. As they serve no purpose they should be removed.",
  "timeToFix" : 5,
  "description" : "Empty block of code detected. As they serve no purpose they should be removed."
}, {
  "patternId" : "EmptyInitBlock",
  "title" : "Empty block of code detected. As they serve no purpose they should be removed.",
  "timeToFix" : 5,
  "description" : "Empty block of code detected. As they serve no purpose they should be removed."
}, {
  "patternId" : "EmptyKtFile",
  "title" : "Empty block of code detected. As they serve no purpose they should be removed.",
  "timeToFix" : 5,
  "description" : "Empty block of code detected. As they serve no purpose they should be removed."
}, {
  "patternId" : "EmptySecondaryConstructor",
  "title" : "Empty block of code detected. As they serve no purpose they should be removed.",
  "timeToFix" : 5,
  "description" : "Empty block of code detected. As they serve no purpose they should be removed."
}, {
  "patternId" : "EmptyTryBlock",
  "title" : "Empty block of code detected. As they serve no purpose they should be removed.",
  "timeToFix" : 5,
  "description" : "Empty block of code detected. As they serve no purpose they should be removed."
}, {
  "patternId" : "EmptyWhenBlock",
  "title" : "Empty block of code detected. As they serve no purpose they should be removed.",
  "timeToFix" : 5,
  "description" : "Empty block of code detected. As they serve no purpose they should be removed."
}, {
  "patternId" : "EmptyWhileBlock",
  "title" : "Empty block of code detected. As they serve no purpose they should be removed.",
  "timeToFix" : 5,
  "description" : "Empty block of code detected. As they serve no purpose they should be removed."
}, {
  "patternId" : "AvoidReferentialEquality",
  "title" : "Avoid using referential equality and prefer to use referential equality checks instead.",
  "timeToFix" : 5,
  "description" : "Avoid using referential equality and prefer to use referential equality checks instead."
}, {
  "patternId" : "Deprecation",
  "title" : "Deprecated elements should not be used.",
  "timeToFix" : 5,
  "description" : "Deprecated elements should not be used."
}, {
  "patternId" : "DontDowncastCollectionTypes",
  "title" : "Down-casting immutable collection types is breaking the collection contract.",
  "timeToFix" : 5,
  "description" : "Down-casting immutable collection types is breaking the collection contract."
}, {
  "patternId" : "DoubleMutabilityForCollection",
  "title" : "Using var with mutable collections or values leads to double mutability. Consider using val or immutable collection or value types.",
  "timeToFix" : 5,
  "description" : "Using var with mutable collections or values leads to double mutability. Consider using val or immutable collection or value types."
}, {
  "patternId" : "DuplicateCaseInWhenExpression",
  "title" : "Duplicated `case` statements in a `when` expression detected. Both cases should be merged.",
  "timeToFix" : 5,
  "description" : "Duplicated `case` statements in a `when` expression detected. Both cases should be merged."
}, {
  "patternId" : "ElseCaseInsteadOfExhaustiveWhen",
  "title" : "A `when` expression that has an exhaustive set of cases should not contain an `else` case.",
  "timeToFix" : 5,
  "description" : "A `when` expression that has an exhaustive set of cases should not contain an `else` case."
}, {
  "patternId" : "EqualsAlwaysReturnsTrueOrFalse",
  "title" : "Having an `equals()` method that always returns true or false is not a good idea. It does not follow the contract of this method. Consider a good default implementation (e.g. `this == other`).",
  "timeToFix" : 5,
  "description" : "Having an `equals()` method that always returns true or false is not a good idea. It does not follow the contract of this method. Consider a good default implementation (e.g. `this == other`)."
}, {
  "patternId" : "EqualsWithHashCodeExist",
  "title" : "Always override hashCode when you override equals. All hash-based collections depend on objects meeting the equals-contract. Two equal objects must produce the same hashcode.",
  "timeToFix" : 5,
  "description" : "Always override hashCode when you override equals. All hash-based collections depend on objects meeting the equals-contract. Two equal objects must produce the same hashcode. When inheriting equals or hashcode, override the inherited and call the super method for clarification."
}, {
  "patternId" : "ExitOutsideMain",
  "title" : "Do not directly exit the process outside the `main` function. Throw an exception instead.",
  "timeToFix" : 5,
  "description" : "Do not directly exit the process outside the `main` function. Throw an exception instead."
}, {
  "patternId" : "ExplicitGarbageCollectionCall",
  "title" : "Don't try to be smarter than the JVM. Your code should work independently whether the garbage collector is disabled or not. If you face memory issues, try tuning the JVM options instead of relying on code itself.",
  "timeToFix" : 5,
  "description" : "Don't try to be smarter than the JVM. Your code should work independently whether the garbage collector is disabled or not. If you face memory issues, try tuning the JVM options instead of relying on code itself."
}, {
  "patternId" : "HasPlatformType",
  "title" : "Platform types must be declared explicitly in public APIs.",
  "timeToFix" : 5,
  "description" : "Platform types must be declared explicitly in public APIs."
}, {
  "patternId" : "ImplicitDefaultLocale",
  "title" : "Implicit default locale used for string processing. Consider using explicit locale.",
  "timeToFix" : 5,
  "description" : "Implicit default locale used for string processing. Consider using explicit locale."
}, {
  "patternId" : "InvalidRange",
  "title" : "If a for loops condition is false before the first iteration, the loop will never get executed.",
  "timeToFix" : 5,
  "description" : "If a for loops condition is false before the first iteration, the loop will never get executed."
}, {
  "patternId" : "IteratorHasNextCallsNextMethod",
  "title" : "The `hasNext()` method of an Iterator implementation should not call the `next()` method. The state of the iterator should not be changed inside the `hasNext()` method. The `hasNext()` method is not supposed to have any side effects.",
  "timeToFix" : 5,
  "description" : "The `hasNext()` method of an Iterator implementation should not call the `next()` method. The state of the iterator should not be changed inside the `hasNext()` method. The `hasNext()` method is not supposed to have any side effects."
}, {
  "patternId" : "IteratorNotThrowingNoSuchElementException",
  "title" : "The `next()` method of an `Iterator` implementation should throw a `NoSuchElementException` when there are no more elements to return.",
  "timeToFix" : 5,
  "description" : "The `next()` method of an `Iterator` implementation should throw a `NoSuchElementException` when there are no more elements to return."
}, {
  "patternId" : "LateinitUsage",
  "title" : "Usage of `lateinit` detected. Using `lateinit` for property initialization is error prone, try using constructor injection or delegation.",
  "timeToFix" : 5,
  "description" : "Usage of `lateinit` detected. Using `lateinit` for property initialization is error prone, try using constructor injection or delegation."
}, {
  "patternId" : "MapGetWithNotNullAssertionOperator",
  "title" : "map.get() with not-null assertion operator (!!) can result in a NullPointerException. Consider usage of map.getValue(), map.getOrDefault() or map.getOrElse() instead.",
  "timeToFix" : 5,
  "description" : "map.get() with not-null assertion operator (!!) can result in a NullPointerException. Consider usage of map.getValue(), map.getOrDefault() or map.getOrElse() instead."
}, {
  "patternId" : "MissingPackageDeclaration",
  "title" : "Kotlin source files should define a package.",
  "timeToFix" : 5,
  "description" : "Kotlin source files should define a package."
}, {
  "patternId" : "MissingWhenCase",
  "title" : "Check usage of `when` used as a statement and don't compare all enum or sealed class cases.",
  "timeToFix" : 5,
  "description" : "Check usage of `when` used as a statement and don't compare all enum or sealed class cases."
}, {
  "patternId" : "NullCheckOnMutableProperty",
  "title" : "Checking nullability on a mutable property is not useful because the property may be set to null afterwards.",
  "timeToFix" : 5,
  "description" : "Checking nullability on a mutable property is not useful because the property may be set to null afterwards."
}, {
  "patternId" : "RedundantElseInWhen",
  "title" : "Check for redundant `else` case in `when` expression when used as statement.",
  "timeToFix" : 5,
  "description" : "Check for redundant `else` case in `when` expression when used as statement."
}, {
  "patternId" : "UnconditionalJumpStatementInLoop",
  "title" : "An unconditional jump statement in a loop is useless. The loop itself is only executed once.",
  "timeToFix" : 5,
  "description" : "An unconditional jump statement in a loop is useless. The loop itself is only executed once."
}, {
  "patternId" : "UnnecessaryNotNullOperator",
  "title" : "Unnecessary not-null unary operator (!!) detected.",
  "timeToFix" : 5,
  "description" : "Unnecessary not-null unary operator (!!) detected."
}, {
  "patternId" : "UnnecessaryNotNullCheck",
  "title" : "Remove unnecessary not-null checks on non-null types.",
  "timeToFix" : 5,
  "description" : "Remove unnecessary not-null checks on non-null types."
}, {
  "patternId" : "UnnecessarySafeCall",
  "title" : "Unnecessary safe call operator detected.",
  "timeToFix" : 5,
  "description" : "Unnecessary safe call operator detected."
}, {
  "patternId" : "UnreachableCode",
  "title" : "Unreachable code detected. This code should be removed.",
  "timeToFix" : 5,
  "description" : "Unreachable code detected. This code should be removed."
}, {
  "patternId" : "UnsafeCallOnNullableType",
  "title" : "Unsafe calls on nullable types detected. These calls will throw a NullPointerException in case the nullable value is null.",
  "timeToFix" : 5,
  "description" : "Unsafe calls on nullable types detected. These calls will throw a NullPointerException in case the nullable value is null."
}, {
  "patternId" : "UnsafeCast",
  "title" : "Cast operator throws an exception if the cast is not possible.",
  "timeToFix" : 5,
  "description" : "Cast operator throws an exception if the cast is not possible."
}, {
  "patternId" : "UselessPostfixExpression",
  "title" : "The incremented or decremented value is unused. This value is replaced with the original value.",
  "timeToFix" : 5,
  "description" : "The incremented or decremented value is unused. This value is replaced with the original value."
}, {
  "patternId" : "WrongEqualsTypeParameter",
  "title" : "Wrong parameter type for `equals()` method found. To correctly override the `equals()` method use `Any?`.",
  "timeToFix" : 5,
  "description" : "Wrong parameter type for `equals()` method found. To correctly override the `equals()` method use `Any?`."
}, {
  "patternId" : "IgnoredReturnValue",
  "title" : "This call returns a value which is ignored",
  "timeToFix" : 5,
  "description" : "This call returns a value which is ignored"
}, {
  "patternId" : "ImplicitUnitReturnType",
  "title" : "Functions using expression statements have an implicit return type. Changing the type of the expression accidentally, changes the function return type. This may lead to backward incompatibility.",
  "timeToFix" : 5,
  "description" : "Functions using expression statements have an implicit return type. Changing the type of the expression accidentally, changes the function return type. This may lead to backward incompatibility. Use a block statement to make clear this function will never return a value."
}, {
  "patternId" : "NullableToStringCall",
  "title" : "This call may return the string \"null\"",
  "timeToFix" : 5,
  "description" : "This call may return the string \"null\""
}, {
  "patternId" : "UnreachableCatchBlock",
  "title" : "Unreachable catch block detected.",
  "timeToFix" : 5,
  "description" : "Unreachable catch block detected."
}, {
  "patternId" : "CastToNullableType",
  "title" : "Disallow to cast to nullable types.",
  "timeToFix" : 5,
  "description" : "Disallow to cast to nullable types."
}, {
  "patternId" : "UnusedUnaryOperator",
  "title" : "This unary operator is unused.",
  "timeToFix" : 5,
  "description" : "This unary operator is unused."
}, {
  "patternId" : "CommentOverPrivateFunction",
  "title" : "Comments for private functions should be avoided. Prefer giving the function an expressive name. Split it up in smaller, self-explaining functions if necessary.",
  "timeToFix" : 5,
  "description" : "Comments for private functions should be avoided. Prefer giving the function an expressive name. Split it up in smaller, self-explaining functions if necessary."
}, {
  "patternId" : "CommentOverPrivateProperty",
  "title" : "Private properties should be named in a self-explanatory manner without the need for a  comment.",
  "timeToFix" : 5,
  "description" : "Private properties should be named in a self-explanatory manner without the need for a  comment."
}, {
  "patternId" : "DeprecatedBlockTag",
  "title" : "Do not use the `@deprecated` block tag, which is not supported by KDoc. Use the `@Deprecated` annotation instead.",
  "timeToFix" : 5,
  "description" : "Do not use the `@deprecated` block tag, which is not supported by KDoc. Use the `@Deprecated` annotation instead."
}, {
  "patternId" : "EndOfSentenceFormat",
  "title" : "The first sentence in a KDoc comment should end with proper punctuation or with a correct URL.",
  "timeToFix" : 5,
  "description" : "The first sentence in a KDoc comment should end with proper punctuation or with a correct URL."
}, {
  "patternId" : "OutdatedDocumentation",
  "title" : "KDoc comments should match the actual function or class signature",
  "timeToFix" : 5,
  "description" : "KDoc comments should match the actual function or class signature"
}, {
  "patternId" : "UndocumentedPublicClass",
  "title" : "Public classes, interfaces and objects require documentation.",
  "timeToFix" : 5,
  "description" : "Public classes, interfaces and objects require documentation."
}, {
  "patternId" : "UndocumentedPublicFunction",
  "title" : "Public functions require documentation.",
  "timeToFix" : 5,
  "description" : "Public functions require documentation."
}, {
  "patternId" : "UndocumentedPublicProperty",
  "title" : "Public properties require documentation.",
  "timeToFix" : 5,
  "description" : "Public properties require documentation."
}, {
  "patternId" : "AbsentOrWrongFileLicense",
  "title" : "License text is absent or incorrect.",
  "timeToFix" : 5,
  "description" : "License text is absent or incorrect."
}, {
  "patternId" : "KDocReferencesNonPublicProperty",
  "title" : "KDoc comments should not refer to non-public properties.",
  "timeToFix" : 5,
  "description" : "KDoc comments should not refer to non-public properties."
}, {
  "patternId" : "LongParameterList",
  "title" : "The more parameters a function has the more complex it is. Long parameter lists are often used to control complex algorithms and violate the Single Responsibility Principle. Prefer functions with short parameter lists.",
  "timeToFix" : 5,
  "description" : "The more parameters a function has the more complex it is. Long parameter lists are often used to control complex algorithms and violate the Single Responsibility Principle. Prefer functions with short parameter lists."
}, {
  "patternId" : "LongMethod",
  "title" : "One method should have one responsibility. Long methods tend to handle many things at once. Prefer smaller methods to make them easier to understand.",
  "timeToFix" : 5,
  "description" : "One method should have one responsibility. Long methods tend to handle many things at once. Prefer smaller methods to make them easier to understand."
}, {
  "patternId" : "LargeClass",
  "title" : "One class should have one responsibility. Large classes tend to handle many things at once. Split up large classes into smaller classes that are easier to understand.",
  "timeToFix" : 5,
  "description" : "One class should have one responsibility. Large classes tend to handle many things at once. Split up large classes into smaller classes that are easier to understand."
}, {
  "patternId" : "ComplexInterface",
  "title" : "An interface contains too many functions and properties. Large classes tend to handle many things at once. An interface should have one responsibility. Split up large interfaces into smaller ones that are easier to understand.",
  "timeToFix" : 5,
  "description" : "An interface contains too many functions and properties. Large classes tend to handle many things at once. An interface should have one responsibility. Split up large interfaces into smaller ones that are easier to understand."
}, {
  "patternId" : "CyclomaticComplexMethod",
  "title" : "Prefer splitting up complex methods into smaller, easier to test methods.",
  "timeToFix" : 5,
  "description" : "Prefer splitting up complex methods into smaller, easier to test methods."
}, {
  "patternId" : "CognitiveComplexMethod",
  "title" : "Prefer splitting up complex methods into smaller, easier to understand methods.",
  "timeToFix" : 5,
  "description" : "Prefer splitting up complex methods into smaller, easier to understand methods."
}, {
  "patternId" : "StringLiteralDuplication",
  "title" : "Multiple occurrences of the same string literal within a single file detected. Prefer extracting the string literal into a property or constant.",
  "timeToFix" : 5,
  "description" : "Multiple occurrences of the same string literal within a single file detected. Prefer extracting the string literal into a property or constant."
}, {
  "patternId" : "MethodOverloading",
  "title" : "Methods which are overloaded often might be harder to maintain. Furthermore, these methods are tightly coupled. Refactor these methods and try to use optional parameters.",
  "timeToFix" : 5,
  "description" : "Methods which are overloaded often might be harder to maintain. Furthermore, these methods are tightly coupled. Refactor these methods and try to use optional parameters."
}, {
  "patternId" : "NestedBlockDepth",
  "title" : "Excessive nesting leads to hidden complexity. Prefer extracting code to make it easier to understand.",
  "timeToFix" : 5,
  "description" : "Excessive nesting leads to hidden complexity. Prefer extracting code to make it easier to understand."
}, {
  "patternId" : "NestedScopeFunctions",
  "title" : "Over-using scope functions makes code confusing, hard to read and bug prone.",
  "timeToFix" : 5,
  "description" : "Over-using scope functions makes code confusing, hard to read and bug prone."
}, {
  "patternId" : "TooManyFunctions",
  "title" : "Too many functions inside a/an file/class/object/interface always indicate a violation of the single responsibility principle. Maybe the file/class/object/interface wants to manage too many things at once.",
  "timeToFix" : 5,
  "description" : "Too many functions inside a/an file/class/object/interface always indicate a violation of the single responsibility principle. Maybe the file/class/object/interface wants to manage too many things at once. Extract functionality which clearly belongs together."
}, {
  "patternId" : "ComplexCondition",
  "title" : "Complex conditions should be simplified and extracted into well-named methods if necessary.",
  "timeToFix" : 5,
  "description" : "Complex conditions should be simplified and extracted into well-named methods if necessary."
}, {
  "patternId" : "LabeledExpression",
  "title" : "Expression with labels increase complexity and affect maintainability.",
  "timeToFix" : 5,
  "description" : "Expression with labels increase complexity and affect maintainability."
}, {
  "patternId" : "ReplaceSafeCallChainWithRun",
  "title" : "Chains of safe calls on non-nullable types can be surrounded with `run {}`.",
  "timeToFix" : 5,
  "description" : "Chains of safe calls on non-nullable types can be surrounded with `run {}`."
}, {
  "patternId" : "NamedArguments",
  "title" : "Named arguments are required for function calls with many arguments.",
  "timeToFix" : 5,
  "description" : "Named arguments are required for function calls with many arguments."
}, {
  "patternId" : "TooGenericExceptionCaught",
  "title" : "The caught exception is too generic. Prefer catching specific exceptions to the case that is currently handled.",
  "timeToFix" : 5,
  "description" : "The caught exception is too generic. Prefer catching specific exceptions to the case that is currently handled."
}, {
  "patternId" : "ExceptionRaisedInUnexpectedLocation",
  "title" : "This method is not expected to throw exceptions. This can cause weird behavior.",
  "timeToFix" : 5,
  "description" : "This method is not expected to throw exceptions. This can cause weird behavior."
}, {
  "patternId" : "TooGenericExceptionThrown",
  "title" : "The thrown exception is too generic. Prefer throwing project specific exceptions to handle error cases.",
  "timeToFix" : 5,
  "description" : "The thrown exception is too generic. Prefer throwing project specific exceptions to handle error cases."
}, {
  "patternId" : "NotImplementedDeclaration",
  "title" : "The NotImplementedDeclaration should only be used when a method stub is necessary. This defers the development of the functionality of this function. Hence, the `NotImplementedDeclaration` should only serve as a temporary declaration.",
  "timeToFix" : 5,
  "description" : "The NotImplementedDeclaration should only be used when a method stub is necessary. This defers the development of the functionality of this function. Hence, the `NotImplementedDeclaration` should only serve as a temporary declaration. Before releasing, this type of declaration should be removed."
}, {
  "patternId" : "PrintStackTrace",
  "title" : "Do not print a stack trace. These debug statements should be removed or replaced with a logger.",
  "timeToFix" : 5,
  "description" : "Do not print a stack trace. These debug statements should be removed or replaced with a logger."
}, {
  "patternId" : "InstanceOfCheckForException",
  "title" : "Instead of catching for a general exception type and checking for a specific exception type, use multiple catch blocks.",
  "timeToFix" : 5,
  "description" : "Instead of catching for a general exception type and checking for a specific exception type, use multiple catch blocks."
}, {
  "patternId" : "ThrowingExceptionsWithoutMessageOrCause",
  "title" : "A call to the default constructor of an exception was detected. Instead one of the constructor overloads should be called. This allows to provide more meaningful exceptions.",
  "timeToFix" : 5,
  "description" : "A call to the default constructor of an exception was detected. Instead one of the constructor overloads should be called. This allows to provide more meaningful exceptions."
}, {
  "patternId" : "ReturnFromFinally",
  "title" : "Do not return within a finally statement. This can discard exceptions.",
  "timeToFix" : 5,
  "description" : "Do not return within a finally statement. This can discard exceptions."
}, {
  "patternId" : "ThrowingExceptionFromFinally",
  "title" : "Do not throw an exception within a finally statement. This can discard exceptions and is confusing.",
  "timeToFix" : 5,
  "description" : "Do not throw an exception within a finally statement. This can discard exceptions and is confusing."
}, {
  "patternId" : "ThrowingExceptionInMain",
  "title" : "The main method should not throw an exception.",
  "timeToFix" : 5,
  "description" : "The main method should not throw an exception."
}, {
  "patternId" : "RethrowCaughtException",
  "title" : "Do not rethrow a caught exception of the same type.",
  "timeToFix" : 5,
  "description" : "Do not rethrow a caught exception of the same type."
}, {
  "patternId" : "ThrowingNewInstanceOfSameException",
  "title" : "Avoid catch blocks that rethrow a caught exception wrapped inside a new instance of the same exception.",
  "timeToFix" : 5,
  "description" : "Avoid catch blocks that rethrow a caught exception wrapped inside a new instance of the same exception."
}, {
  "patternId" : "SwallowedException",
  "title" : "The caught exception is swallowed. The original exception could be lost.",
  "timeToFix" : 5,
  "description" : "The caught exception is swallowed. The original exception could be lost."
}, {
  "patternId" : "ObjectExtendsThrowable",
  "title" : "An `object` should not extend and type of Throwable. Throwables are stateful and should be instantiated only when needed for when a specific error occurs.",
  "timeToFix" : 5,
  "description" : "An `object` should not extend and type of Throwable. Throwables are stateful and should be instantiated only when needed for when a specific error occurs. An `object`, being a singleton, that extends any type of Throwable consequently introduces a global singleton exception whose instance may be inadvertently reused from multiple places, thus introducing shared mutable state."
}, {
  "patternId" : "AnnotationOnSeparateLine",
  "title" : "Multiple annotations should be placed on separate lines. ",
  "timeToFix" : 5,
  "description" : "Multiple annotations should be placed on separate lines. "
}, {
  "patternId" : "AnnotationSpacing",
  "title" : "There should not be empty lines between an annotation and the object that it's annotating",
  "timeToFix" : 5,
  "description" : "There should not be empty lines between an annotation and the object that it's annotating"
}, {
  "patternId" : "ArgumentListWrapping",
  "title" : "Reports incorrect argument list wrapping",
  "timeToFix" : 5,
  "description" : "Reports incorrect argument list wrapping"
}, {
  "patternId" : "ChainWrapping",
  "title" : "Checks if condition chaining is wrapped right",
  "timeToFix" : 5,
  "description" : "Checks if condition chaining is wrapped right"
}, {
  "patternId" : "CommentSpacing",
  "title" : "Checks if comments have the right spacing",
  "timeToFix" : 5,
  "description" : "Checks if comments have the right spacing"
}, {
  "patternId" : "EnumEntryNameCase",
  "title" : "Reports enum entries with names that don't meet standard conventions.",
  "timeToFix" : 5,
  "description" : "Reports enum entries with names that don't meet standard conventions."
}, {
  "patternId" : "Filename",
  "title" : "Checks if top level class matches the filename",
  "timeToFix" : 5,
  "description" : "Checks if top level class matches the filename"
}, {
  "patternId" : "FinalNewline",
  "title" : "Detects missing final newlines",
  "timeToFix" : 5,
  "description" : "Detects missing final newlines"
}, {
  "patternId" : "ImportOrdering",
  "title" : "Detects imports in non default order",
  "timeToFix" : 5,
  "description" : "Detects imports in non default order"
}, {
  "patternId" : "Indentation",
  "title" : "Reports mis-indented code",
  "timeToFix" : 5,
  "description" : "Reports mis-indented code"
}, {
  "patternId" : "MaximumLineLength",
  "title" : "Reports lines with exceeded length",
  "timeToFix" : 5,
  "description" : "Reports lines with exceeded length"
}, {
  "patternId" : "ModifierOrdering",
  "title" : "Detects modifiers in non default order",
  "timeToFix" : 5,
  "description" : "Detects modifiers in non default order"
}, {
  "patternId" : "MultiLineIfElse",
  "title" : "Detects multiline if-else statements without braces",
  "timeToFix" : 5,
  "description" : "Detects multiline if-else statements without braces"
}, {
  "patternId" : "NoBlankLineBeforeRbrace",
  "title" : "Detects blank lines before rbraces",
  "timeToFix" : 5,
  "description" : "Detects blank lines before rbraces"
}, {
  "patternId" : "NoBlankLinesInChainedMethodCalls",
  "title" : "Detects blank lines in chained method rules.",
  "timeToFix" : 5,
  "description" : "Detects blank lines in chained method rules."
}, {
  "patternId" : "NoConsecutiveBlankLines",
  "title" : "Reports consecutive blank lines",
  "timeToFix" : 5,
  "description" : "Reports consecutive blank lines"
}, {
  "patternId" : "NoEmptyClassBody",
  "title" : "Reports empty class bodies",
  "timeToFix" : 5,
  "description" : "Reports empty class bodies"
}, {
  "patternId" : "NoEmptyFirstLineInMethodBlock",
  "title" : "Reports methods that have an empty first line.",
  "timeToFix" : 5,
  "description" : "Reports methods that have an empty first line."
}, {
  "patternId" : "NoLineBreakAfterElse",
  "title" : "Reports line breaks after else",
  "timeToFix" : 5,
  "description" : "Reports line breaks after else"
}, {
  "patternId" : "NoLineBreakBeforeAssignment",
  "title" : "Reports line breaks before assignment",
  "timeToFix" : 5,
  "description" : "Reports line breaks before assignment"
}, {
  "patternId" : "NoMultipleSpaces",
  "title" : "Reports multiple space usages",
  "timeToFix" : 5,
  "description" : "Reports multiple space usages"
}, {
  "patternId" : "NoSemicolons",
  "title" : "Detects semicolons",
  "timeToFix" : 5,
  "description" : "Detects semicolons"
}, {
  "patternId" : "NoTrailingSpaces",
  "title" : "Detects trailing spaces",
  "timeToFix" : 5,
  "description" : "Detects trailing spaces"
}, {
  "patternId" : "NoUnitReturn",
  "title" : "Detects optional 'Unit' return types",
  "timeToFix" : 5,
  "description" : "Detects optional 'Unit' return types"
}, {
  "patternId" : "NoUnusedImports",
  "title" : "Detects unused imports",
  "timeToFix" : 5,
  "description" : "Detects unused imports"
}, {
  "patternId" : "NoWildcardImports",
  "title" : "Detects wildcast import usages",
  "timeToFix" : 5,
  "description" : "Detects wildcast import usages"
}, {
  "patternId" : "PackageName",
  "title" : "Checks package name is formatted correctly",
  "timeToFix" : 5,
  "description" : "Checks package name is formatted correctly"
}, {
  "patternId" : "ParameterListWrapping",
  "title" : "Detects mis-aligned parameter lists",
  "timeToFix" : 5,
  "description" : "Detects mis-aligned parameter lists"
}, {
  "patternId" : "SpacingAroundAngleBrackets",
  "title" : "Reports spaces around angle brackets",
  "timeToFix" : 5,
  "description" : "Reports spaces around angle brackets"
}, {
  "patternId" : "SpacingAroundColon",
  "title" : "Reports spaces around colons",
  "timeToFix" : 5,
  "description" : "Reports spaces around colons"
}, {
  "patternId" : "SpacingAroundComma",
  "title" : "Reports spaces around commas",
  "timeToFix" : 5,
  "description" : "Reports spaces around commas"
}, {
  "patternId" : "SpacingAroundCurly",
  "title" : "Reports spaces around curly braces",
  "timeToFix" : 5,
  "description" : "Reports spaces around curly braces"
}, {
  "patternId" : "SpacingAroundDot",
  "title" : "Reports spaces around member invocation operator (dot).",
  "timeToFix" : 5,
  "description" : "Reports spaces around member invocation operator (dot)."
}, {
  "patternId" : "SpacingAroundDoubleColon",
  "title" : "Reports spaces around double colons",
  "timeToFix" : 5,
  "description" : "Reports spaces around double colons"
}, {
  "patternId" : "SpacingAroundKeyword",
  "title" : "Reports spaces around keywords",
  "timeToFix" : 5,
  "description" : "Reports spaces around keywords"
}, {
  "patternId" : "SpacingAroundOperators",
  "title" : "Reports spaces around operators",
  "timeToFix" : 5,
  "description" : "Reports spaces around operators"
}, {
  "patternId" : "SpacingAroundParens",
  "title" : "Reports spaces around parentheses",
  "timeToFix" : 5,
  "description" : "Reports spaces around parentheses"
}, {
  "patternId" : "SpacingAroundRangeOperator",
  "title" : "Reports spaces around range operator",
  "timeToFix" : 5,
  "description" : "Reports spaces around range operator"
}, {
  "patternId" : "SpacingAroundUnaryOperator",
  "title" : "Reports spaces around unary operator",
  "timeToFix" : 5,
  "description" : "Reports spaces around unary operator"
}, {
  "patternId" : "SpacingBetweenDeclarationsWithAnnotations",
  "title" : "Declarations and declarations with annotations should have an empty space between.",
  "timeToFix" : 5,
  "description" : "Declarations and declarations with annotations should have an empty space between."
}, {
  "patternId" : "SpacingBetweenDeclarationsWithComments",
  "title" : "Declarations and declarations with comments should have an empty space between.",
  "timeToFix" : 5,
  "description" : "Declarations and declarations with comments should have an empty space between."
}, {
  "patternId" : "StringTemplate",
  "title" : "Detects simplifications in template strings",
  "timeToFix" : 5,
  "description" : "Detects simplifications in template strings"
}, {
  "patternId" : "TrailingCommaOnCallSite",
  "title" : "Rule to mandate/forbid trailing commas at call sites",
  "timeToFix" : 5,
  "description" : "Rule to mandate/forbid trailing commas at call sites"
}, {
  "patternId" : "TrailingCommaOnDeclarationSite",
  "title" : "Rule to mandate/forbid trailing commas at declaration sites",
  "timeToFix" : 5,
  "description" : "Rule to mandate/forbid trailing commas at declaration sites"
}, {
  "patternId" : "Wrapping",
  "title" : "Reports missing newlines (e.g. between parentheses of a multi-line function call",
  "timeToFix" : 5,
  "description" : "Reports missing newlines (e.g. between parentheses of a multi-line function call"
}, {
  "patternId" : "BlockCommentInitialStarAlignment",
  "title" : "Detect the alignment of the initial star in a block comment.",
  "timeToFix" : 5,
  "description" : "Detect the alignment of the initial star in a block comment."
}, {
  "patternId" : "CommentWrapping",
  "title" : "Reports mis-indented code",
  "timeToFix" : 5,
  "description" : "Reports mis-indented code"
}, {
  "patternId" : "DiscouragedCommentLocation",
  "title" : "Detect discouraged comment locations.",
  "timeToFix" : 5,
  "description" : "Detect discouraged comment locations."
}, {
  "patternId" : "FunctionReturnTypeSpacing",
  "title" : "Checks the spacing between colon and return type.",
  "timeToFix" : 5,
  "description" : "Checks the spacing between colon and return type."
}, {
  "patternId" : "FunKeywordSpacing",
  "title" : "Checks the spacing after the fun keyword.",
  "timeToFix" : 5,
  "description" : "Checks the spacing after the fun keyword."
}, {
  "patternId" : "FunctionSignature",
  "title" : "Format signature to be single when possible, multiple lines otherwise.",
  "timeToFix" : 5,
  "description" : "Format signature to be single when possible, multiple lines otherwise."
}, {
  "patternId" : "FunctionStartOfBodySpacing",
  "title" : "Check for consistent spacing before start of function body.",
  "timeToFix" : 5,
  "description" : "Check for consistent spacing before start of function body."
}, {
  "patternId" : "FunctionTypeReferenceSpacing",
  "title" : "Checks the spacing before and after the angle brackets of a type argument list.",
  "timeToFix" : 5,
  "description" : "Checks the spacing before and after the angle brackets of a type argument list."
}, {
  "patternId" : "KdocWrapping",
  "title" : "Reports mis-indented code",
  "timeToFix" : 5,
  "description" : "Reports mis-indented code"
}, {
  "patternId" : "ModifierListSpacing",
  "title" : "Checks the spacing between the modifiers in and after the last modifier in a modifier list.",
  "timeToFix" : 5,
  "description" : "Checks the spacing between the modifiers in and after the last modifier in a modifier list."
}, {
  "patternId" : "NullableTypeSpacing",
  "title" : "Ensure no spaces in nullable type.",
  "timeToFix" : 5,
  "description" : "Ensure no spaces in nullable type."
}, {
  "patternId" : "ParameterListSpacing",
  "title" : "Ensure consistent spacing inside the parameter list.",
  "timeToFix" : 5,
  "description" : "Ensure consistent spacing inside the parameter list."
}, {
  "patternId" : "SpacingBetweenFunctionNameAndOpeningParenthesis",
  "title" : "Ensure consistent spacing between function name and opening parenthesis.",
  "timeToFix" : 5,
  "description" : "Ensure consistent spacing between function name and opening parenthesis."
}, {
  "patternId" : "TypeArgumentListSpacing",
  "title" : "Reports spaces in the type reference before a function.",
  "timeToFix" : 5,
  "description" : "Reports spaces in the type reference before a function."
}, {
  "patternId" : "TypeParameterListSpacing",
  "title" : "Check spacing after a type parameter list in function and class declarations.",
  "timeToFix" : 5,
  "description" : "Check spacing after a type parameter list in function and class declarations."
}, {
  "patternId" : "UnnecessaryParenthesesBeforeTrailingLambda",
  "title" : "Ensures there are no unnecessary parentheses before a trailing lambda",
  "timeToFix" : 5,
  "description" : "Ensures there are no unnecessary parentheses before a trailing lambda"
}, {
  "patternId" : "MatchingDeclarationName",
  "title" : "If a source file contains only a single non-private top-level class or object, the file name should reflect the case-sensitive name plus the .kt extension.",
  "timeToFix" : 5,
  "description" : "If a source file contains only a single non-private top-level class or object, the file name should reflect the case-sensitive name plus the .kt extension."
}, {
  "patternId" : "MemberNameEqualsClassName",
  "title" : "A member should not be given the same name as its parent class or object.",
  "timeToFix" : 5,
  "description" : "A member should not be given the same name as its parent class or object."
}, {
  "patternId" : "InvalidPackageDeclaration",
  "title" : "Kotlin source files should be stored in the directory corresponding to its package statement.",
  "timeToFix" : 5,
  "description" : "Kotlin source files should be stored in the directory corresponding to its package statement."
}, {
  "patternId" : "NoNameShadowing",
  "title" : "Disallow shadowing variable declarations.",
  "timeToFix" : 5,
  "description" : "Disallow shadowing variable declarations."
}, {
  "patternId" : "TopLevelPropertyNaming",
  "title" : "Top level property names should follow the naming convention set in the projects configuration.",
  "timeToFix" : 5,
  "description" : "Top level property names should follow the naming convention set in the projects configuration."
}, {
  "patternId" : "BooleanPropertyNaming",
  "title" : "Boolean property name should follow the naming convention set in the projects configuration.",
  "timeToFix" : 5,
  "description" : "Boolean property name should follow the naming convention set in the projects configuration."
}, {
  "patternId" : "LambdaParameterNaming",
  "title" : "Lambda parameter names should follow the naming convention set in the projects configuration.",
  "timeToFix" : 5,
  "description" : "Lambda parameter names should follow the naming convention set in the projects configuration."
}, {
  "patternId" : "ConstructorParameterNaming",
  "title" : "Constructor parameter names should follow the naming convention set in the projects configuration.",
  "timeToFix" : 5,
  "description" : "Constructor parameter names should follow the naming convention set in the projects configuration."
}, {
  "patternId" : "ForbiddenClassName",
  "title" : "Forbidden class name as per configuration detected.",
  "timeToFix" : 5,
  "description" : "Forbidden class name as per configuration detected."
}, {
  "patternId" : "ClassNaming",
  "title" : "A class or object name should fit the naming pattern defined in the projects configuration.",
  "timeToFix" : 5,
  "description" : "A class or object name should fit the naming pattern defined in the projects configuration."
}, {
  "patternId" : "PackageNaming",
  "title" : "Package names should match the naming convention set in the configuration.",
  "timeToFix" : 5,
  "description" : "Package names should match the naming convention set in the configuration."
}, {
  "patternId" : "EnumNaming",
  "title" : "Enum names should follow the naming convention set in the projects configuration.",
  "timeToFix" : 5,
  "description" : "Enum names should follow the naming convention set in the projects configuration."
}, {
  "patternId" : "ObjectPropertyNaming",
  "title" : "Property names inside objects should follow the naming convention set in the projects configuration.",
  "timeToFix" : 5,
  "description" : "Property names inside objects should follow the naming convention set in the projects configuration."
}, {
  "patternId" : "FunctionParameterNaming",
  "title" : "Function parameter names should follow the naming convention set in the projects configuration.",
  "timeToFix" : 5,
  "description" : "Function parameter names should follow the naming convention set in the projects configuration."
}, {
  "patternId" : "FunctionNaming",
  "title" : "Function names should follow the naming convention set in the configuration.",
  "timeToFix" : 5,
  "description" : "Function names should follow the naming convention set in the configuration."
}, {
  "patternId" : "FunctionMinLength",
  "title" : "Function names should not be shorter than the minimum defined in the configuration.",
  "timeToFix" : 5,
  "description" : "Function names should not be shorter than the minimum defined in the configuration."
}, {
  "patternId" : "FunctionMaxLength",
  "title" : "Function names should not be longer than the maximum set in the project configuration.",
  "timeToFix" : 5,
  "description" : "Function names should not be longer than the maximum set in the project configuration."
}, {
  "patternId" : "VariableMaxLength",
  "title" : "Variable names should not be longer than the maximum set in the configuration.",
  "timeToFix" : 5,
  "description" : "Variable names should not be longer than the maximum set in the configuration."
}, {
  "patternId" : "VariableMinLength",
  "title" : "Variable names should not be shorter than the minimum defined in the configuration.",
  "timeToFix" : 5,
  "description" : "Variable names should not be shorter than the minimum defined in the configuration."
}, {
  "patternId" : "VariableNaming",
  "title" : "Variable names should follow the naming convention set in the projects configuration.",
  "timeToFix" : 5,
  "description" : "Variable names should follow the naming convention set in the projects configuration."
}, {
  "patternId" : "NonBooleanPropertyPrefixedWithIs",
  "title" : "Only boolean property names can start with `is` prefix.",
  "timeToFix" : 5,
  "description" : "Only boolean property names can start with `is` prefix."
}, {
  "patternId" : "ForEachOnRange",
  "title" : "Using the forEach method on ranges has a heavy performance cost. Prefer using simple for loops.",
  "timeToFix" : 5,
  "description" : "Using the forEach method on ranges has a heavy performance cost. Prefer using simple for loops."
}, {
  "patternId" : "SpreadOperator",
  "title" : "In most cases using a spread operator causes a full copy of the array to be created before calling a method. This may result in a performance penalty.",
  "timeToFix" : 5,
  "description" : "In most cases using a spread operator causes a full copy of the array to be created before calling a method. This may result in a performance penalty."
}, {
  "patternId" : "UnnecessaryTemporaryInstantiation",
  "title" : "Avoid temporary objects when converting primitive types to `String`.",
  "timeToFix" : 5,
  "description" : "Avoid temporary objects when converting primitive types to `String`."
}, {
  "patternId" : "ArrayPrimitive",
  "title" : "Using `Array<Primitive>` leads to implicit boxing and a performance hit.",
  "timeToFix" : 5,
  "description" : "Using `Array<Primitive>` leads to implicit boxing and a performance hit."
}, {
  "patternId" : "CouldBeSequence",
  "title" : "Several chained collection operations that should be a sequence.",
  "timeToFix" : 5,
  "description" : "Several chained collection operations that should be a sequence."
}, {
  "patternId" : "UnnecessaryPartOfBinaryExpression",
  "title" : "Detects duplicate condition into binary expression and recommends to remove unnecessary checks",
  "timeToFix" : 5,
  "description" : "Detects duplicate condition into binary expression and recommends to remove unnecessary checks"
}, {
  "patternId" : "CanBeNonNullable",
  "title" : "Variable can be changed to non-nullable, as it is never set to null.",
  "timeToFix" : 5,
  "description" : "Variable can be changed to non-nullable, as it is never set to null."
}, {
  "patternId" : "CascadingCallWrapping",
  "title" : "If a chained call is wrapped to a new line, subsequent chained calls should be as well.",
  "timeToFix" : 5,
  "description" : "If a chained call is wrapped to a new line, subsequent chained calls should be as well."
}, {
  "patternId" : "ClassOrdering",
  "title" : "Class contents should be in this order: Property declarations/initializer blocks; secondary constructors; method declarations then companion objects.",
  "timeToFix" : 5,
  "description" : "Class contents should be in this order: Property declarations/initializer blocks; secondary constructors; method declarations then companion objects."
}, {
  "patternId" : "CollapsibleIfStatements",
  "title" : "Two if statements which could be collapsed were detected. These statements can be merged to improve readability.",
  "timeToFix" : 5,
  "description" : "Two if statements which could be collapsed were detected. These statements can be merged to improve readability."
}, {
  "patternId" : "DestructuringDeclarationWithTooManyEntries",
  "title" : "Too many entries in a destructuring declaration make the code hard to understand.",
  "timeToFix" : 5,
  "description" : "Too many entries in a destructuring declaration make the code hard to understand."
}, {
  "patternId" : "ReturnCount",
  "title" : "Restrict the number of return statements in methods.",
  "timeToFix" : 5,
  "description" : "Restrict the number of return statements in methods."
}, {
  "patternId" : "ThrowsCount",
  "title" : "Restrict the number of throw statements in methods.",
  "timeToFix" : 5,
  "description" : "Restrict the number of throw statements in methods."
}, {
  "patternId" : "TrimMultilineRawString",
  "title" : "Multiline raw strings should be followed by `trimMargin()` or `trimIndent()`.",
  "timeToFix" : 5,
  "description" : "Multiline raw strings should be followed by `trimMargin()` or `trimIndent()`."
}, {
  "patternId" : "NewLineAtEndOfFile",
  "title" : "Checks whether files end with a line separator.",
  "timeToFix" : 5,
  "description" : "Checks whether files end with a line separator."
}, {
  "patternId" : "WildcardImport",
  "title" : "Wildcard imports should be replaced with imports using fully qualified class names. Wildcard imports can lead to naming conflicts. A library update can introduce naming clashes with your classes which results in compilation errors.",
  "timeToFix" : 5,
  "description" : "Wildcard imports should be replaced with imports using fully qualified class names. Wildcard imports can lead to naming conflicts. A library update can introduce naming clashes with your classes which results in compilation errors."
}, {
  "patternId" : "MaxLineLength",
  "title" : "Line detected, which is longer than the defined maximum line length in the code style.",
  "timeToFix" : 5,
  "description" : "Line detected, which is longer than the defined maximum line length in the code style."
}, {
  "patternId" : "TrailingWhitespace",
  "title" : "Whitespaces at the end of a line are unnecessary and can be removed.",
  "timeToFix" : 5,
  "description" : "Whitespaces at the end of a line are unnecessary and can be removed."
}, {
  "patternId" : "NoTabs",
  "title" : "Checks if tabs are used in Kotlin files.",
  "timeToFix" : 5,
  "description" : "Checks if tabs are used in Kotlin files."
}, {
  "patternId" : "EqualsOnSignatureLine",
  "title" : "Equals signs for expression style functions should be on the same line as the signature.",
  "timeToFix" : 5,
  "description" : "Equals signs for expression style functions should be on the same line as the signature."
}, {
  "patternId" : "EqualsNullCall",
  "title" : "Equals() method is called with null as parameter. Consider using == to compare to null.",
  "timeToFix" : 5,
  "description" : "Equals() method is called with null as parameter. Consider using == to compare to null."
}, {
  "patternId" : "ForbiddenComment",
  "title" : "Flags a forbidden comment.",
  "timeToFix" : 5,
  "description" : "Flags a forbidden comment."
}, {
  "patternId" : "ForbiddenImport",
  "title" : "Mark forbidden imports. A forbidden import could be an import for an unstable / experimental api and hence you might want to mark it as forbidden in order to get warned about the usage.",
  "timeToFix" : 5,
  "description" : "Mark forbidden imports. A forbidden import could be an import for an unstable / experimental api and hence you might want to mark it as forbidden in order to get warned about the usage."
}, {
  "patternId" : "ForbiddenMethodCall",
  "title" : "Mark forbidden methods. A forbidden method could be an invocation of an unstable / experimental method and hence you might want to mark it as forbidden in order to get warned about the usage.",
  "timeToFix" : 5,
  "description" : "Mark forbidden methods. A forbidden method could be an invocation of an unstable / experimental method and hence you might want to mark it as forbidden in order to get warned about the usage."
}, {
  "patternId" : "ForbiddenSuppress",
  "title" : "Suppressing a rule which is forbidden in current configuration.",
  "timeToFix" : 5,
  "description" : "Suppressing a rule which is forbidden in current configuration."
}, {
  "patternId" : "FunctionOnlyReturningConstant",
  "title" : "A function that only returns a constant is misleading. Consider declaring a constant instead.",
  "timeToFix" : 5,
  "description" : "A function that only returns a constant is misleading. Consider declaring a constant instead."
}, {
  "patternId" : "SpacingBetweenPackageAndImports",
  "title" : "Violation of the package declaration style detected.",
  "timeToFix" : 5,
  "description" : "Violation of the package declaration style detected."
}, {
  "patternId" : "LoopWithTooManyJumpStatements",
  "title" : "The loop contains more than one break or continue statement. The code should be refactored to increase readability.",
  "timeToFix" : 5,
  "description" : "The loop contains more than one break or continue statement. The code should be refactored to increase readability."
}, {
  "patternId" : "SafeCast",
  "title" : "Prefer to use a safe cast instead of if-else-null.",
  "timeToFix" : 5,
  "description" : "Prefer to use a safe cast instead of if-else-null."
}, {
  "patternId" : "UnnecessaryAbstractClass",
  "title" : "An abstract class is unnecessary. May be refactored to an interface or to a concrete class.",
  "timeToFix" : 5,
  "description" : "An abstract class is unnecessary. May be refactored to an interface or to a concrete class."
}, {
  "patternId" : "UnnecessaryAnnotationUseSiteTarget",
  "title" : "Unnecessary Annotation use-site Target. It can be removed.",
  "timeToFix" : 5,
  "description" : "Unnecessary Annotation use-site Target. It can be removed."
}, {
  "patternId" : "UnnecessaryParentheses",
  "title" : "Unnecessary parentheses don't add any value to the code and should be removed.",
  "timeToFix" : 5,
  "description" : "Unnecessary parentheses don't add any value to the code and should be removed."
}, {
  "patternId" : "UnnecessaryInheritance",
  "title" : "The extended super type is unnecessary.",
  "timeToFix" : 5,
  "description" : "The extended super type is unnecessary."
}, {
  "patternId" : "UnnecessaryInnerClass",
  "title" : "The 'inner' qualifier is unnecessary.",
  "timeToFix" : 5,
  "description" : "The 'inner' qualifier is unnecessary."
}, {
  "patternId" : "UtilityClassWithPublicConstructor",
  "title" : "The class declaration is unnecessary because it only contains utility functions. An object declaration should be used instead.",
  "timeToFix" : 5,
  "description" : "The class declaration is unnecessary because it only contains utility functions. An object declaration should be used instead."
}, {
  "patternId" : "ObjectLiteralToLambda",
  "title" : "Report object literals that can be changed to lambdas.",
  "timeToFix" : 5,
  "description" : "Report object literals that can be changed to lambdas."
}, {
  "patternId" : "OptionalAbstractKeyword",
  "title" : "Unnecessary abstract modifier in interface detected. This abstract modifier is unnecessary and thus can be removed.",
  "timeToFix" : 5,
  "description" : "Unnecessary abstract modifier in interface detected. This abstract modifier is unnecessary and thus can be removed."
}, {
  "patternId" : "OptionalWhenBraces",
  "title" : "Optional braces in when expression detected.",
  "timeToFix" : 5,
  "description" : "Optional braces in when expression detected."
}, {
  "patternId" : "OptionalUnit",
  "title" : "Return type of `Unit` is unnecessary and can be safely removed.",
  "timeToFix" : 5,
  "description" : "Return type of `Unit` is unnecessary and can be safely removed."
}, {
  "patternId" : "ProtectedMemberInFinalClass",
  "title" : "Member with protected visibility in final class is private. Consider using private or internal as modifier.",
  "timeToFix" : 5,
  "description" : "Member with protected visibility in final class is private. Consider using private or internal as modifier."
}, {
  "patternId" : "SerialVersionUIDInSerializableClass",
  "title" : "A class which implements the Serializable interface does not define a correct serialVersionUID field. The serialVersionUID field should be a constant long value inside a companion object.",
  "timeToFix" : 5,
  "description" : "A class which implements the Serializable interface does not define a correct serialVersionUID field. The serialVersionUID field should be a constant long value inside a companion object."
}, {
  "patternId" : "MagicNumber",
  "title" : "Report magic numbers. Magic number is a numeric literal that is not defined as a constant and hence it's unclear what the purpose of this number is. It's better to declare such numbers as constants and give them a proper name.",
  "timeToFix" : 5,
  "description" : "Report magic numbers. Magic number is a numeric literal that is not defined as a constant and hence it's unclear what the purpose of this number is. It's better to declare such numbers as constants and give them a proper name. By default, -1, 0, 1, and 2 are not considered to be magic numbers."
}, {
  "patternId" : "ModifierOrder",
  "title" : "Modifiers are not in the correct order. Consider to reorder these modifiers.",
  "timeToFix" : 5,
  "description" : "Modifiers are not in the correct order. Consider to reorder these modifiers."
}, {
  "patternId" : "DataClassContainsFunctions",
  "title" : "Data classes should mainly be used to store data and should not have any extra functions (Compiler will automatically generate equals, toString and hashCode functions).",
  "timeToFix" : 5,
  "description" : "Data classes should mainly be used to store data and should not have any extra functions (Compiler will automatically generate equals, toString and hashCode functions)."
}, {
  "patternId" : "DataClassShouldBeImmutable",
  "title" : "Data classes should mainly be immutable and should not have any side effects (To copy an object altering some of its properties use the copy function).",
  "timeToFix" : 5,
  "description" : "Data classes should mainly be immutable and should not have any side effects (To copy an object altering some of its properties use the copy function)."
}, {
  "patternId" : "UseDataClass",
  "title" : "Classes that do nothing but hold data should be replaced with a data class.",
  "timeToFix" : 5,
  "description" : "Classes that do nothing but hold data should be replaced with a data class."
}, {
  "patternId" : "UnusedImports",
  "title" : "Unused Imports are dead code and should be removed.",
  "timeToFix" : 5,
  "description" : "Unused Imports are dead code and should be removed."
}, {
  "patternId" : "UnusedPrivateClass",
  "title" : "Private class is unused and should be removed.",
  "timeToFix" : 5,
  "description" : "Private class is unused and should be removed."
}, {
  "patternId" : "UnusedPrivateMember",
  "title" : "Private member is unused and should be removed.",
  "timeToFix" : 5,
  "description" : "Private member is unused and should be removed."
}, {
  "patternId" : "ExpressionBodySyntax",
  "title" : "Functions with exact one statement, the return statement, can be rewritten with ExpressionBodySyntax.",
  "timeToFix" : 5,
  "description" : "Functions with exact one statement, the return statement, can be rewritten with ExpressionBodySyntax."
}, {
  "patternId" : "NestedClassesVisibility",
  "title" : "The explicit public modifier still results in an internal nested class.",
  "timeToFix" : 5,
  "description" : "The explicit public modifier still results in an internal nested class."
}, {
  "patternId" : "RedundantVisibilityModifierRule",
  "title" : "Redundant visibility modifiers detected, which can be safely removed.",
  "timeToFix" : 5,
  "description" : "Redundant visibility modifiers detected, which can be safely removed."
}, {
  "patternId" : "UntilInsteadOfRangeTo",
  "title" : "A `..` call can be replaced with `until`.",
  "timeToFix" : 5,
  "description" : "A `..` call can be replaced with `until`."
}, {
  "patternId" : "UnnecessaryApply",
  "title" : "The `apply` usage is unnecessary and can be removed.",
  "timeToFix" : 5,
  "description" : "The `apply` usage is unnecessary and can be removed."
}, {
  "patternId" : "UnnecessaryFilter",
  "title" : "`filter()` with other collection operations may be simplified.",
  "timeToFix" : 5,
  "description" : "`filter()` with other collection operations may be simplified."
}, {
  "patternId" : "UnnecessaryLet",
  "title" : "The `let` usage is unnecessary.",
  "timeToFix" : 5,
  "description" : "The `let` usage is unnecessary."
}, {
  "patternId" : "MayBeConst",
  "title" : "Usage of `vals` that can be `const val` detected.",
  "timeToFix" : 5,
  "description" : "Usage of `vals` that can be `const val` detected."
}, {
  "patternId" : "PreferToOverPairSyntax",
  "title" : "Pair was created using the Pair constructor, using the to syntax is preferred.",
  "timeToFix" : 5,
  "description" : "Pair was created using the Pair constructor, using the to syntax is preferred."
}, {
  "patternId" : "MandatoryBracesIfStatements",
  "title" : "Multi-line if statement was found that does not have braces. These braces should be added to improve readability.",
  "timeToFix" : 5,
  "description" : "Multi-line if statement was found that does not have braces. These braces should be added to improve readability."
}, {
  "patternId" : "MandatoryBracesLoops",
  "title" : "A multi-line loop was found that does not have braces. These should be added to improve readability.",
  "timeToFix" : 5,
  "description" : "A multi-line loop was found that does not have braces. These should be added to improve readability."
}, {
  "patternId" : "NullableBooleanCheck",
  "title" : "Nullable boolean check should use `==` rather than `?:`",
  "timeToFix" : 5,
  "description" : "Nullable boolean check should use `==` rather than `?:`"
}, {
  "patternId" : "VarCouldBeVal",
  "title" : "Var declaration could be val.",
  "timeToFix" : 5,
  "description" : "Var declaration could be val."
}, {
  "patternId" : "ForbiddenVoid",
  "title" : "`Unit` should be used instead of `Void`.",
  "timeToFix" : 5,
  "description" : "`Unit` should be used instead of `Void`."
}, {
  "patternId" : "ExplicitItLambdaParameter",
  "title" : "Declaring lambda parameters as `it` is redundant.",
  "timeToFix" : 5,
  "description" : "Declaring lambda parameters as `it` is redundant."
}, {
  "patternId" : "ExplicitCollectionElementAccessMethod",
  "title" : "Prefer usage of the indexed access operator [] for map element access or insert methods.",
  "timeToFix" : 5,
  "description" : "Prefer usage of the indexed access operator [] for map element access or insert methods."
}, {
  "patternId" : "UselessCallOnNotNull",
  "title" : "This call on a non-null reference may be reduced or removed. Some calls are intended to be called on nullable collection or text types (e.g. `String?`).When this call is used on a reference to a non-null type (e.g.",
  "timeToFix" : 5,
  "description" : "This call on a non-null reference may be reduced or removed. Some calls are intended to be called on nullable collection or text types (e.g. `String?`).When this call is used on a reference to a non-null type (e.g. `String`) it is redundant and will have no effect, so it can be removed."
}, {
  "patternId" : "UnderscoresInNumericLiterals",
  "title" : "Report missing or invalid underscores in base 10 numbers. Numeric literals should be underscore separated to increase readability.",
  "timeToFix" : 5,
  "description" : "Report missing or invalid underscores in base 10 numbers. Numeric literals should be underscore separated to increase readability."
}, {
  "patternId" : "UseRequire",
  "title" : "Use require() instead of throwing an IllegalArgumentException.",
  "timeToFix" : 5,
  "description" : "Use require() instead of throwing an IllegalArgumentException."
}, {
  "patternId" : "UseCheckOrError",
  "title" : "Use check() or error() instead of throwing an IllegalStateException.",
  "timeToFix" : 5,
  "description" : "Use check() or error() instead of throwing an IllegalStateException."
}, {
  "patternId" : "UseIfInsteadOfWhen",
  "title" : "Binary expressions are better expressed using an `if` expression than a `when` expression.",
  "timeToFix" : 5,
  "description" : "Binary expressions are better expressed using an `if` expression than a `when` expression."
}, {
  "patternId" : "RedundantExplicitType",
  "title" : "Type does not need to be stated explicitly and can be removed.",
  "timeToFix" : 5,
  "description" : "Type does not need to be stated explicitly and can be removed."
}, {
  "patternId" : "UseArrayLiteralsInAnnotations",
  "title" : "Array literals [...] should be preferred as they are more readable than `arrayOf(...)` expressions.",
  "timeToFix" : 5,
  "description" : "Array literals [...] should be preferred as they are more readable than `arrayOf(...)` expressions."
}, {
  "patternId" : "UseEmptyCounterpart",
  "title" : "Instantiation of an object's \"empty\" state should use the object's \"empty\" initializer.",
  "timeToFix" : 5,
  "description" : "Instantiation of an object's \"empty\" state should use the object's \"empty\" initializer."
}, {
  "patternId" : "UseCheckNotNull",
  "title" : "Use checkNotNull() instead of check() for checking not-null.",
  "timeToFix" : 5,
  "description" : "Use checkNotNull() instead of check() for checking not-null."
}, {
  "patternId" : "UseRequireNotNull",
  "title" : "Use requireNotNull() instead of require() for checking not-null.",
  "timeToFix" : 5,
  "description" : "Use requireNotNull() instead of require() for checking not-null."
}, {
  "patternId" : "RedundantHigherOrderMapUsage",
  "title" : "Checks for redundant 'map' calls, which can be removed.",
  "timeToFix" : 5,
  "description" : "Checks for redundant 'map' calls, which can be removed."
}, {
  "patternId" : "UseIfEmptyOrIfBlank",
  "title" : "Use `ifEmpty` or `ifBlank` instead of `isEmpty` or `isBlank` to assign a default value.",
  "timeToFix" : 5,
  "description" : "Use `ifEmpty` or `ifBlank` instead of `isEmpty` or `isBlank` to assign a default value."
}, {
  "patternId" : "MultilineLambdaItParameter",
  "title" : "Multiline lambdas should not use `it` as a parameter name.",
  "timeToFix" : 5,
  "description" : "Multiline lambdas should not use `it` as a parameter name."
}, {
  "patternId" : "MultilineRawStringIndentation",
  "title" : "The indentation of the raw String should be consistent",
  "timeToFix" : 5,
  "description" : "The indentation of the raw String should be consistent"
}, {
  "patternId" : "UseIsNullOrEmpty",
  "title" : "Use `isNullOrEmpty()` call instead of `x == null || x.isEmpty()`.",
  "timeToFix" : 5,
  "description" : "Use `isNullOrEmpty()` call instead of `x == null || x.isEmpty()`."
}, {
  "patternId" : "UseOrEmpty",
  "title" : "Use `orEmpty()` call instead of `?: emptyList()`",
  "timeToFix" : 5,
  "description" : "Use `orEmpty()` call instead of `?: emptyList()`"
}, {
  "patternId" : "UseAnyOrNoneInsteadOfFind",
  "title" : "Use `any` or `none` instead of `find` and `null` checks.",
  "timeToFix" : 5,
  "description" : "Use `any` or `none` instead of `find` and `null` checks."
}, {
  "patternId" : "UnnecessaryBackticks",
  "title" : "Backticks are unnecessary.",
  "timeToFix" : 5,
  "description" : "Backticks are unnecessary."
}, {
  "patternId" : "MaxChainedCallsOnSameLine",
  "title" : "Chained calls beyond the maximum should be wrapped to a new line.",
  "timeToFix" : 5,
  "description" : "Chained calls beyond the maximum should be wrapped to a new line."
}, {
  "patternId" : "AlsoCouldBeApply",
  "title" : "When an `also` block contains only `it`-started expressions, simplify it to the `apply` block.",
  "timeToFix" : 5,
  "description" : "When an `also` block contains only `it`-started expressions, simplify it to the `apply` block."
}, {
  "patternId" : "UseSumOfInsteadOfFlatMapSize",
  "title" : "Use `sumOf` instead of `flatMap` and `size/count` calls",
  "timeToFix" : 5,
  "description" : "Use `sumOf` instead of `flatMap` and `size/count` calls"
}, {
  "patternId" : "ForbiddenPublicDataClass",
  "title" : "The data classes are bad for the binary compatibility in public APIs. Avoid to use it.",
  "timeToFix" : 5,
  "description" : "The data classes are bad for the binary compatibility in public APIs. Avoid to use it."
}, {
  "patternId" : "LibraryEntitiesShouldNotBePublic",
  "title" : "Library classes should not be public.",
  "timeToFix" : 5,
  "description" : "Library classes should not be public."
}, {
  "patternId" : "LibraryCodeMustSpecifyReturnType",
  "title" : "Library functions/properties should have an explicit return type. Inferred return types can easily be changed by mistake which may lead to breaking changes.",
  "timeToFix" : 5,
  "description" : "Library functions/properties should have an explicit return type. Inferred return types can easily be changed by mistake which may lead to breaking changes."
}, {
  "patternId" : "ViolatesTypeResolutionRequirements",
  "title" : "`@RequiresTypeResolution` should be used if and only if the property `bindingContext` is used.",
  "timeToFix" : 5,
  "description" : "`@RequiresTypeResolution` should be used if and only if the property `bindingContext` is used."
}, {
  "patternId" : "UseEntityAtName",
  "title" : "Prefer Entity.atName to Entity.from(....nameIdentifier).",
  "timeToFix" : 5,
  "description" : "Prefer Entity.atName to Entity.from(....nameIdentifier)."
}, {
  "patternId" : "TooManyFunctions",
  "title" : "This rule reports a file with an excessive function count.",
  "timeToFix" : 5,
  "description" : "This rule reports a file with an excessive function count."
}, {
  "patternId" : "TooManyFunctionsTwo",
  "title" : "Too many functions can make the maintainability of a file more costly.",
  "timeToFix" : 5,
  "description" : "Too many functions can make the maintainability of a file more costly."
} ]